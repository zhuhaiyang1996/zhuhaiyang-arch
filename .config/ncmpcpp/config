ncmpcpp_directory = ~/.config/ncmpcpp
lyrics_directory = ~/.local/share/lyrics
mpd_host = 127.0.0.1
mpd_port = 6602
mpd_connection_timeout = 5
mpd_music_dir = "~/slsk/music"
mpd_crossfade_time = 4
visualizer_fifo_path = /tmp/mpd.fifo
visualizer_output_name = toggle_visualizer
visualizer_in_stereo = yes
visualizer_sync_interval = 30
visualizer_type = spectrum
# visualizer_look = "●▮" # ellipse
visualizer_look = "▌▌" # spectrum
visualizer_color = cyan, green, yellow, magenta, red, blue
# visualizer_color = 41, 83, 119, 155, 185, 215, 209, 203, 197, 161
# visualizer_color = 46,45,44,43,42,41,40,39,38,37,36,35
playlist_disable_highlight_delay = 1
message_delay_time = 1
## For a song format you can use:
##
## %l - length
## %f - filename
## %D - directory
## %a - artist
## %A - album artist
## %t - title
## %b - album
## %y - date
## %n - track number (01/12 -> 01)
## %N - full track info (01/12 -> 01/12)
## %g - genre
## %c - composer
## %p - performer
## %d - disc
## %C - comment
## %P - priority
## $R - begin right alignment
##
## If you want to make sure that a part of the format is displayed only when
## certain tags are present, you can archieve it by grouping them with brackets,
## e.g. '{%a - %t}' will be evaluated to 'ARTIST - TITLE' if both tags are
## present or '' otherwise.  It is also possible to define a list of
## alternatives by providing several groups and separating them with '|',
## .g. '{%t}|{%f}' will be evaluated to 'TITLE' or 'FILENAME' if the former is
## not present.
##
## Note: If you want to set limit on maximal length of a tag, just put the
## appropriate number between % and character that defines tag type, e.g. to
## make album take max. 20 terminal cells, use '%20b'.
##
## In addition, formats support markers used for text attributes.  They are
## followed by character '$'. After that you can put:
##
## - 0 - default window color (discards all other colors)
## - 1 - black
## - 2 - red
## - 3 - green
## - 4 - yellow
## - 5 - blue
## - 6 - magenta
## - 7 - cyan
## - 8 - white
## - 9 - end of current color
## - b - bold text
## - u - underline text
## - r - reverse colors
## - a - use alternative character set
##
## If you don't want to use a non-color attribute anymore, just put it again,
## but this time insert character '/' between '$' and attribute character,
## e.g. {$b%t$/b}|{$r%f$/r} will display bolded title tag or filename with
## reversed colors.
##
## If you want to use 256 colors and/or background colors in formats (the naming
## scheme is described below in section about color definitions), it can be done
## with the syntax $(COLOR), e.g. to set the artist tag to one of the
## non-standard colors and make it have yellow background, you need to write
## $(197_yellow)%a$(end). Note that for standard colors this is interchangable
## with attributes listed above.
## Note: colors can be nested.
song_list_format = {$4%a - }{%t}|{$8%f$9}$R{$3(%l)$9}
song_status_format = $b{{$8"%t"}} $3by {$4%a{ $3in $7%b{ (%y)}} $3}|{$8%f}
#
song_library_format = {%n - }{%t}|{%f}
#
alternative_header_first_line_format = $b$1$aqqu$/a$9 {%t}|{%f} $1$atqq$/a$9$/b
#
alternative_header_second_line_format = {{$4$b%a$/b$9}{ - $7%b$9}{ ($4%y$9)}}|{%D}
#
current_item_prefix = $(cyan)$r$b
#
current_item_suffix = $/r$(end)$/b
#
current_item_inactive_column_prefix = $(magenta)$r
#
current_item_inactive_column_suffix = $/r$(end)
#
#now_playing_prefix = $b
#
#now_playing_suffix = $/b
#
#browser_playlist_prefix = "$2playlist$9 "
#
#selected_item_prefix = $6
#
#selected_item_suffix = $9
#
#modified_item_prefix = $3> $9
##
## Note: attributes are not supported for the following variables.
##
#song_window_title_format = {%a - }{%t}|{%f}
##
## Note: Below variables are used for sorting songs in browser.  The sort mode
## determines how songs are sorted, and can be used in combination with a sort
## format to specify a custom sorting format.  Available values for
## browser_sort_mode are "name", "mtime", "format" and "noop".
##
#browser_sort_mode = name
browser_sort_format = {(%l)} {%a - }{%t}|{%f}
##### columns settings #####
##
## syntax of song columns list format is "column column etc."
##
## - syntax for each column is:
##
## (width of the column)[color of the column]{displayed tag}
##
## Note: Width is by default in %, if you want a column to have fixed size, add
## 'f' after the value, e.g. (10)[white]{a} will be the column that take 10% of
## screen (so the real width will depend on actual screen size), whereas
## (10f)[white]{a} will take 10 terminal cells, no matter how wide the screen
## is.
##
## - color is optional (if you want the default one, leave the field empty).
##
## Note: You can give a column additional attributes by putting appropriate
## character after displayed tag character. Available attributes are:
##
## - r - column will be right aligned
## - E - if tag is empty, empty tag marker won't be displayed
##
## You can also:
##
## - give a column custom name by putting it after attributes, separated with
##   character ':', e.g. {lr:Length} gives you right aligned column of lengths
##   named "Length".
##
## - define sequence of tags, that have to be displayed in case predecessor is
##   empty in a way similar to the one in classic song format, i.e. using '|'
##   character, e.g. {a|c|p:Owner} creates column named "Owner" that tries to
##   display artist tag and then composer and performer if previous ones are not
##   available.
##
#
song_columns_list_format = (7f)[magenta]{l} (25)[cyan]{a} (50)[white]{t|f:Title} (20)[red]{b}
#
##### various settings #####
#
##
## Note: Custom command that will be executed each time song changes. Useful for
## notifications etc.
##
# execute_on_song_change = notify-send -i ~/.config/icons/music-player_black.png "Now Playing" "$(mpc --format '%title% \n%artist% - %album%' current)"
# execute_on_song_change = musnotify
# classic or columns
playlist_display_mode = columns
#
browser_display_mode = columns
#
search_engine_display_mode = columns
#
playlist_editor_display_mode = columns
discard_colors_if_item_is_selected = yes
#show_duplicate_tags = true
incremental_seeking = yes
#seek_time = 1
#volume_change_step = 2
autocenter_mode = yes
centered_cursor = yes
# Yes I have gathered all of the best-looking progressbar looks for ncmpcpp from all over the internet, yw.
# progressbar_look = "•••"
# progressbar_look = "---"
# progressbar_look = "─>─"
# progressbar_look = "▀▀ "
# progressbar_look = "━■"
progressbar_look = "⠒⠒⠐"
# progressbar_look = "◾◾◽"
# progressbar_look = "━╋━"
# progressbar_look = "━━━"
# progressbar_look = "━━─"
# progressbar_look = "─╼─"
# progressbar_look = "╼·"
## Available values: database, playlist.
#default_place_to_search_in = database
user_interface = alternative
#data_fetching_delay = yes
## Available values: artist, album_artist, date, genre, composer, performer.
media_library_primary_tag = album_artist
media_library_sort_by_mtime = yes
## Available values: wrapped, normal.
default_find_mode = wrapped
#default_tag_editor_pattern = %n - %t
lines_scrolled = 2
lyrics_fetchers = lyricwiki, azlyrics, genius, sing365, lyricsmania, metrolyrics, justsomelyrics, jahlyrics, plyrics, tekstowo, internet
follow_now_playing_lyrics = yes
fetch_lyrics_for_current_song_in_background = no
store_lyrics_in_song_dir = no
#generate_win32_compatible_filenames = yes
#allow_for_physical_item_deletion = no
## Note: Language has to be expressed as an ISO 639 alpha-2 code.
#lastfm_preferred_language = en
#
#space_add_mode = add_remove
#show_hidden_files_in_local_browser = no
#
## How shall screen switcher work?
##
## - "previous" - switch between the current and previous screen.
## - "screen1,...,screenN" - switch between given sequence of screens.
##
## Screens available for use: help, playlist, browser, search_engine,
## media_library, playlist_editor, tag_editor, outputs, visualizer, clock,
## lyrics, last_fm.
##
#screen_switcher_mode = playlist, browser
##
## Note: You can define startup screen by choosing screen from the list above.
##
startup_screen = playlist
## Note: You can define startup slave screen by choosing screen from the list
## above or an empty value for no slave screen.
startup_slave_screen = ""
startup_slave_screen_focus = no
#
##
## Default width of locked screen (in %).  Acceptable values are from 20 to 80.
##
#
locked_screen_width_part = 40
#
#ask_for_locked_screen_width_part = yes
#
#jump_to_now_playing_song_at_start = yes
#
#ask_before_clearing_playlists = yes
clock_display_seconds = no
display_volume_level = yes
display_bitrate = no
display_remaining_time = no
#
## Available values: none, basic, extended, perl.
##
#regular_expressions = perl
#
## Note: if below is enabled, ncmpcpp will ignore leading "The" word while
## sorting items in browser, tags in media library, etc.
ignore_leading_the = yes
##
## Note: if below is enabled, ncmpcpp will ignore diacritics while searching and
## filtering lists. This takes an effect only if boost was compiled with ICU
## support.
##
#ignore_diacritics = no
#block_search_constraints_change_if_items_found = yes
mouse_support = yes
mouse_list_scroll_whole_page = no
empty_tag_marker=" -- ‼ -- "
enable_window_title = no
search_engine_default_search_mode = 2
external_editor = nvim
use_console_editor = yes
##### colors definitions #####
##
## It is possible to set a background color by setting a color value
## "<foreground>_<background>", e.g. red_black will set foregound color to red
## and background color to black.
##
## In addition, for terminals that support 256 colors it is possible to set one
## of them by using a number in range [1, 256] instead of color name,
## e.g. numerical value corresponding to red_black is 2_1. To find out if the
## terminal supports 256 colors, run ncmpcpp and check out the bottom of the
## help screen for list of available colors and their numerical values.
##
## What is more, there are two special values for the background color:
## "transparent" and "current". The first one explicitly sets the background to
## be transparent, while the second one allows you to preserve current
## background color and change only the foreground one. It's used implicitly
## when background color is not specified.
##
## Moreover, it is possible to attach format information to selected color
## variables by appending to their end a colon followed by one or more format
## flags, e.g. black:b or red:ur. The following variables support this syntax:
## visualizer_color, color1, color2, empty_tag_color, volume_color,
## state_line_color, state_flags_color, progressbar_color,
## progressbar_elapsed_color, player_state_color, statusbar_time_color,
## alternative_ui_separator_color.
colors_enabled = yes
empty_tag_color = magenta
header_window_color = cyan
volume_color = "red:b"
state_line_color = "yellow"
state_flags_color = default:b
main_window_color = white
progressbar_color = "yellow"
progressbar_elapsed_color = blue:b
statusbar_color = "cyan"
statusbar_time_color = cyan:b
player_state_color = default
alternative_ui_separator_color = green:b
# vim: ft=cfg
